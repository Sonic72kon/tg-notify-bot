services:
  api:
    image: tg-notify-bot-image
    container_name: tg-notify-bot
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tg-notify-bot-network
    ports:
      - "${API__RUN__PORT}:8000"
    stop_signal: SIGINT
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__DATABASE} && psql -U ${DB__USER} -d ${DB__DATABASE} -c 'SELECT version();'"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "200k"
        max-file: "10"

  postgres:
    image: postgres:17-alpine
    container_name: tg-notify-bot-postgres
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB__USER}
      POSTGRES_PASSWORD: ${DB__PASSWORD}
      POSTGRES_DB: ${DB__DATABASE}
    volumes:
      - tg-notify-bot-postgres-data:/var/lib/postgresql/data
    networks:
      - tg-notify-bot-network
    ports:
      - "${DB__PORT}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB__USER} -d ${DB__DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: json-file
      options:
        max-size: "200k"
        max-file: "10"

networks:
  tg-notify-bot-network:
    name: tg-notify-bot-network
    driver: bridge

volumes:
  tg-notify-bot-postgres-data:
    name: tg-notify-bot-postgres-data
